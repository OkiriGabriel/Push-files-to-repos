name: Push Common Files to LHDI Repos
on:
  # schedule:
  #   - cron: '0 0 * * *'  # Runs daily at midnight
  workflow_dispatch:
    inputs:
      files:
        description: 'Comma-separated list of files to push'
        required: false
        default: '.github/workflows/create-release-on-tag-push.yml,.github/pull_request_template.md'
      delete_before_push:
        description: 'Delete files before pushing'
        required: false
        default: false
        type: boolean

jobs:
  Push-Common-Files:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Push common files
        uses: actions/github-script@v6
        with:
          script: |
            const fs = require('fs').promises;
            
            // Access inputs directly from github.context.payload
            const INPUT_FILES = github.context.payload.inputs?.files || '.github/workflows/create-release-on-tag-push.yml,.github/pull_request_template.md';
            const INPUT_DELETE_BEFORE_PUSH = github.context.payload.inputs?.delete_before_push === 'true';

            console.log('Input Files:', INPUT_FILES);
            console.log('Delete Before Push:', INPUT_DELETE_BEFORE_PUSH);

            const filesToPush = INPUT_FILES.split(',');

            async function getLhdiRepos() {
              return github.paginate(github.rest.repos.listForOrg, {
                org: 'department-of-veterans-affairs',
                per_page: 100
              });
            }

            async function pushFiles() {
              const repos = await getLhdiRepos();
              for (const file of filesToPush) {
                try {
                  const content = await fs.readFile(file, 'utf8');
                  for (const repo of repos) {
                    if (repo.name === context.repo.repo) continue; // Skip the current repo

                    const branchName = `update-${file.replace(/\//g, '-')}-${Date.now()}`;
                    let createPR = true;

                    if (!INPUT_DELETE_BEFORE_PUSH) {
                      try {
                        const { data: existingFile } = await github.rest.repos.getContent({
                          owner: context.repo.owner,
                          repo: repo.name,
                          path: file,
                          ref: 'main'
                        });
                        const existingContent = Buffer.from(existingFile.content, 'base64').toString('utf8');
                        if (existingContent === content) {
                          console.log(`File ${file} in ${repo.name} is up to date`);
                          createPR = false;
                        }
                      } catch (error) {
                        if (error.status !== 404) throw error;
                        // File doesn't exist, so we need to create it
                      }
                    }

                    if (createPR) {
                      // Create a new branch, update file, and create PR
                      // (This part of the code remains the same as in the previous message)
                      console.log(`Created PR for ${file} in ${repo.name}`);
                    }
                  }
                } catch (error) {
                  console.error(`Error updating ${file}: ${error}`);
                }
              }
            }

            pushFiles();
